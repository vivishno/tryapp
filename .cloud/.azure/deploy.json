{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {

        "containerRegistryNewOrExisting": {
            "type": "string",
            "defaultValue": "existing",
            "allowedValues": [
                "new",
                "existing"
            ]
        },
        "containerRegistryName": {
            "type": "string",
            "defaultValue": "[concat('acr',uniqueString(resourceGroup().id))]"
        },
        "containerRegistrySku": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
            ]
        },

        "functionAppName": {
            "defaultValue": "acrapp",
            "type": "string",
            "metadata": {
                "description": "Name use as base-template to named the resources to be deployed in Azure."
            }
        },
        "functionGitHubURL": {
            "type": "string",
		"defaultValue": "https://github.com/Azure/aml-function.git",
            "metadata": {
                "description": "The URL of GitHub (ending by .git)"
            }
        },
        "functionGitHubBranch": {
            "type": "string",
            "defaultValue": "master",
            "metadata": {
                "description": "Name of the branch to use when deploying (Default = master)."
            }
        },
        "ExpireOn":{
            "type":"string",
            "defaultValue":"[utcNow('yyyy-MM-dd')]",
            "metadata": {
                "description": "Just a text value (format: yyyy-MM-dd) that express when it is safe to delete these resources"
            }
        },
        "ownerName":{
            "type":"string",
            "defaultValue": "acr_triggers",
            "metadata": {
                "description": "Owner of this deployment, person to contact for question."
            }
        },
        "eventGridSubscriptionName": {
            "type": "string",
            "defaultValue": "acreventsubscription",
            "metadata": {
                "description": "The prefix of the Event Grid  topic's subscription."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "The location in which the Event Grid resources should be deployed."
            }
        },

        "functionName" :{
            "type": "string",
            "defaultValue": "generic_triggers"
        },
        "functionFolder": {
            "type": "string",
	    "defaultValue": "fappdeploy",
            "metadata": {
                "description": "The name of folder containing the function code."
            }
        },
        "patToken": {
            "type": "string",
            "defaultValue": "nopat",
            "metadata": {
                "description": "github pat token for repo access."
            }
        },	
	 "repo_name": {
            "type": "string",
            "defaultValue": "norepo",
            "metadata": {
                "description": "The name of repo."
            }
        }
    },
    "variables":{
        "suffix": "[substring(toLower(uniqueString(resourceGroup().id, resourceGroup().location)),0,5)]",
        "funcAppName": "[toLower(concat(parameters('functionAppName'), variables('suffix')))]",
        "funcStorageAccountName": "[tolower(concat(substring(parameters('functionAppName'), 0, min(length(parameters('functionAppName')),16)), variables('suffix'), 'stg'))]",
        "funcHhostingPlanName": "[concat(substring(parameters('functionAppName'), 0, min(length(parameters('functionAppName')),14)), variables('suffix'), 'plan')]",
        "insightsAppName":"[concat(substring(parameters('functionAppName'), 0, min(length(parameters('functionAppName')),14)), variables('suffix'), '-meta')]",
        "functionProjectFolder": "[parameters('functionFolder')]",
        "functionUrl" : "[concat('https://', variables('funcAppName'),'.azurewebsites.net/api/', parameters('functionName'),'?code=')]",
        "tenantId": "[subscription().tenantId]"
    },
    "resources": [
        {
            "apiVersion": "2018-11-01",
            "name": "[variables('funcAppName')]",
            "type": "Microsoft.Web/sites",
            "kind": "functionapp",
            "identity": {
                        "type": "SystemAssigned"
                    },
            "location": "[resourceGroup().location]",
            "tags": {
                "Owner": "[parameters('ownerName')]",
                "ExpireOn": "[parameters('ExpireOn')]"
            },
            "dependsOn": [
                "[concat('microsoft.insights/components/', variables('insightsAppName'))]",
                "[concat('Microsoft.Web/serverfarms/', variables('funcHhostingPlanName'))]",
                "[concat('Microsoft.Storage/storageAccounts/',variables('funcStorageAccountName'))]"
            ],
            "properties": {
                "name": "[variables('funcAppName')]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~3"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "dotnet"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(concat('microsoft.insights/components/', variables('insightsAppName')), '2015-05-01').InstrumentationKey]"
                        },
                        {
                            "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                            "value": "[reference(concat('microsoft.insights/components/', variables('insightsAppName')), '2015-05-01').ConnectionString]"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('funcStorageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts',variables('funcStorageAccountName')), '2019-06-01').keys[0].value,';EndpointSuffix=','core.windows.net')]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('funcStorageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts',variables('funcStorageAccountName')), '2019-06-01').keys[0].value,';EndpointSuffix=','core.windows.net')]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[concat(variables('funcAppName'), 'ba91')]"
                        },
                        {
                            "name": "PROJECT",
                            "value": "[variables('functionProjectFolder')]"
                        },
                        {
                            "name": "FUNCTIONS_V2_COMPATIBILITY_MODE",
                            "value": "true"
                        },
                        {
                            "name": "PAT_TOKEN",
                            "value": "[parameters('patToken')]"
                        }
                    ]
                },
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms/', variables('funcHhostingPlanName'))]",                
                "hostingEnvironment": "",
                "clientAffinityEnabled": true
            },
            "resources": [
                {
                    "apiVersion": "2018-11-01",
                    "type":"sourcecontrols",
                    "name": "web",
                    "dependsOn": [
                      "[resourceId('Microsoft.Web/sites/', variables('funcAppName'))]"
                    ],
                    "properties": {
                        "repoUrl": "[parameters('functionGitHubURL')]",
                        "branch": "[parameters('functionGitHubBranch')]",
                        "publishRunbook": true,
                        "IsManualIntegration": true
                    }
                }
            ]
        },
        {
            "apiVersion": "2018-11-01",
            "name": "[variables('funcHhostingPlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[resourceGroup().location]",
            "kind": "",
            "tags": {
                "Owner": "[parameters('ownerName')]",
                "ExpireOn": "[parameters('ExpireOn')]"
            },
            "properties": {
                "name": "[variables('funcHhostingPlanName')]",
                "computeMode": "Dynamic"
            },
            "sku": {
                "Tier": "Dynamic",
                "Name": "Y1"
            }
        },
        {
            "apiVersion": "2015-05-01",
            "name": "[variables('insightsAppName')]",
            "type": "microsoft.insights/components",
            "location": "[resourceGroup().location]",
            "tags": {
                "Owner": "[parameters('ownerName')]",
                "ExpireOn": "[parameters('ExpireOn')]"
            },
            "kind": "",
            "properties": {
                "Application_Type": "web",
                "ApplicationId": "[variables('funcAppName')]",
                "Request_Source": "rest"
            }
        },
        {
            "apiVersion": "2019-06-01",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('funcStorageAccountName')]",
            "location": "[resourceGroup().location]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "properties": {
                "supportsHttpsTrafficOnly": true
            }
        },
	
      	{
            "condition": "[equals(parameters('containerRegistryNewOrExisting'), 'new')]",
            "type": "Microsoft.ContainerRegistry/registries",
            "apiVersion": "2019-05-01",
            "name": "[parameters('containerRegistryName')]"
        },
        {
            "name": "[concat(parameters('containerRegistryName'),'/Microsoft.EventGrid/',parameters('eventGridSubscriptionName'))]",
            "type": "Microsoft.ContainerRegistry/registries/providers/eventSubscriptions",
            "location": "[parameters('location')]",
            "apiVersion": "2020-01-01-preview",
            "dependsOn": [
                "[resourceId('Microsoft.Web/Sites', variables('funcAppName'))]",
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]",
                "[resourceId('Microsoft.Web/Sites/sourcecontrols', variables('funcAppName'), 'web')]"
            ],
            "properties": {
                "mode": "Incremental",
                "destination": {
                    "endpointType": "WebHook",
                    "properties": {
                        "endpointUrl": "[concat(variables('functionUrl'), listkeys(resourceId('Microsoft.Web/sites/host', variables('funcAppName'), 'default'), '2019-08-01').functionKeys.default,'&repoName=',parameters('repo_name'))]",
                        "maxEventsPerBatch": 1,
                        "preferredBatchSizeInKilobytes": 64
                    }
                },
                "filter": {
                    "includedEventTypes": [
                        "Microsoft.ContainerRegistry.ImagePushed"
                    ],
                    "advancedFilters": []
                },
                "labels": [],
                "eventDeliverySchema": "EventGridSchema"
            }
        }
    ],
    "outputs":{}
}
